package entity.creature.animal.predator;

import entity.Location;
import entity.creature.Creature;
import entity.creature.animal.Animal;
import entity.creature.animal.herbivore.Boar;
import entity.creature.animal.herbivore.Buffalo;
import entity.creature.animal.herbivore.Deer;
import entity.creature.animal.herbivore.Duck;
import entity.creature.animal.herbivore.Goat;
import entity.creature.animal.herbivore.Horse;
import entity.creature.animal.herbivore.Mouse;
import entity.creature.animal.herbivore.Rabbit;
import entity.creature.animal.herbivore.Sheep;
import java.util.HashMap;
import java.util.Map;

public class Wolf extends Predator {

  // –ö–∞—Ä—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–µ–¥–∞–Ω–∏—è ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
  private static final Map<Class<? extends Creature>, Double> WOLF_EATING_PROBABILITIES = new HashMap<>();

  static {
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã: (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    // –í–æ–ª–∫ –º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å:
    // Horse (–ª–æ—à–∞–¥—å) - 10%
    // Deer (–æ–ª–µ–Ω—å) - 15%
    // Rabbit (–∫—Ä–æ–ª–∏–∫) - 60%
    // Mouse (–º—ã—à—å) - 80%
    // Goat (–∫–æ–∑–∞) - 60%
    // Sheep (–æ–≤—Ü–∞) - 70%
    // Boar (–∫–∞–±–∞–Ω) - 15%
    // Buffalo (–±—É–π–≤–æ–ª) - 10%
    // Duck (—É—Ç–∫–∞) - 40%
    // Caterpillar (–≥—É—Å–µ–Ω–∏—Ü–∞) - 0%
    // –†–∞—Å—Ç–µ–Ω–∏—è –≤–æ–ª–∫ –Ω–µ –µ—Å—Ç, –ø–æ—ç—Ç–æ–º—É 0%
    WOLF_EATING_PROBABILITIES.put(Horse.class, 0.10);
    WOLF_EATING_PROBABILITIES.put(Deer.class, 0.15);
    WOLF_EATING_PROBABILITIES.put(Rabbit.class, 0.60);
    WOLF_EATING_PROBABILITIES.put(Mouse.class, 0.80);
    WOLF_EATING_PROBABILITIES.put(Goat.class, 0.60);
    WOLF_EATING_PROBABILITIES.put(Sheep.class, 0.70);
    WOLF_EATING_PROBABILITIES.put(Boar.class, 0.15);
    WOLF_EATING_PROBABILITIES.put(Buffalo.class, 0.10);
    WOLF_EATING_PROBABILITIES.put(Duck.class, 0.40);
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ –º–∞–ø—É, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—É—á–∞—Ç 0.0
  }

  public Wolf(Location location) {
    super(location);
    // –°–µ—Ç–∞–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    this.weight = 50.0;        // –í–µ—Å –≤–æ–ª–∫–∞ (–∫–≥)
    this.satiety = 8;         // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—ã—Ç–æ—Å—Ç–∏
    this.maxSatiety = 8;      // –ú–∞–∫—Å. —Å—ã—Ç–æ—Å—Ç—å
    this.maxPopulationPerCell = 30;
    this.movementSpeed = 3;   // –ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–∫–ª–µ—Ç–æ–∫/—Ö–æ–¥)
  }

  @Override
  protected double calculateEatProbability(Creature creature) {
    // –ò—â–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ WOLF_EATING_PROBABILITIES
    return WOLF_EATING_PROBABILITIES.getOrDefault(creature.getClass(), 0.0);
  }

  @Override
  protected int calculateNutritionValue(Creature creature) {
    // –ï—Å–ª–∏ —Å—ä–µ–¥–µ–Ω–æ –∂–∏–≤–æ—Ç–Ω–æ–µ, –≤–µ—Ä–Ω—ë–º —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –æ—Ç –µ–≥–æ –≤–µ—Å–∞
    if (creature instanceof Animal victim) {
      return (int) victim.weight;
    }
    // –í–æ–ª–∫ –Ω–µ –µ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è, —Ç–∞–∫ —á—Ç–æ 0
    return 0;
  }

  @Override
  protected Animal createOffspring(Location location) {
    // –°–æ–∑–¥–∞—ë–º –≤–æ–ª—á–æ–Ω–∫–∞ –≤ —Ç–æ–π –∂–µ –ª–æ–∫–∞—Ü–∏–∏
    return new Wolf(location);
  }

  @Override
  public String getSymbol() {
    // Unicode-—Å–∏–º–≤–æ–ª –≤–æ–ª–∫–∞
    return "üê∫";
  }
}