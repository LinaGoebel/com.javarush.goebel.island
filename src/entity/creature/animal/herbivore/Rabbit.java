package entity.creature.animal.herbivore;


import entity.Location;
import entity.creature.Creature;
import entity.creature.animal.Animal;
import entity.creature.plant.Plant;
import java.util.concurrent.ThreadLocalRandom;


public class Rabbit extends Herbivore {

  public Rabbit(Location location) {
    super(location);
    if (location == null) {
      throw new IllegalArgumentException("Location cannot be null for Rabbit");
    }
    this.weight = 2;
    this.maxSatiety = 1;
    this.satiety = 1;
    this.maxPopulationPerCell = 150;
    this.movementSpeed = 2;
  }

  @Override
  protected double calculateEatProbability(Creature creature) {
    // –ö—Ä–æ–ª–∏–∫ –µ—Å—Ç —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 100%
    if (creature instanceof Plant) {
      return 1.0;
    }
    return 0.0; // –ö—Ä–æ–ª–∏–∫ –Ω–µ –µ—Å—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö
  }

  @Override
  protected int calculateNutritionValue(Creature creature) {
    if (creature instanceof Plant plant) {
      // –ö—Ä–æ–ª–∏–∫ —Å—ä–µ–¥–∞–µ—Ç –¥–æ 2 –µ–¥–∏–Ω–∏—Ü —Ä–∞—Å—Ç–µ–Ω–∏—è –∑–∞ —Ä–∞–∑
      int value = Math.min(plant.getQuantity(), 2);
      plant.reduce(value); // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
      return value;
    }
    return 0; // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
  }

  @Override
  public Animal createOffspring(Location location) {
    if (ThreadLocalRandom.current().nextDouble() < 0.8) { // 80% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
      return new Rabbit(location);
    }
    return null; // –ù–µ –≤—Å–µ–≥–¥–∞ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –ø–æ—Ç–æ–º–æ–∫
  }

  @Override
  public String getSymbol() {
    return "üêá";
  }
}