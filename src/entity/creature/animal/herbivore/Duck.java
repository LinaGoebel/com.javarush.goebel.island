package entity.creature.animal.herbivore;

import entity.Location;
import entity.creature.Creature;
import entity.creature.animal.Animal;
import entity.creature.plant.Plant;
import java.util.concurrent.ThreadLocalRandom;

public class Duck extends Herbivore {

  public Duck(Location location) {
    super(location);
    this.weight = 1;
    this.maxSatiety = 1; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—ã—Ç–æ—Å—Ç—å
    this.satiety = 1;    // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—ã—Ç–æ—Å—Ç—å
    this.maxPopulationPerCell = 200;
    this.movementSpeed = 4; // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ 4 –∫–ª–µ—Ç–∫–∏
  }

  @Override
  public boolean eat(Creature creature) {
    // –ï—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ
    if (creature instanceof Plant) {
      super.eat(creature);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç –≥—É—Å–µ–Ω–∏—Ü
    if (creature instanceof Caterpillar) {
      double eatProb = 0.90; // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      if (ThreadLocalRandom.current().nextDouble() < eatProb) {
        this.satiety++; // –£—Ç–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å—ã—Ç–æ—Å—Ç—å
        if (this.satiety > this.maxSatiety) {
          this.satiety = this.maxSatiety;
        }
      }
    }
    return false;
  }

  @Override
  protected double calculateEatProbability(Creature creature) {
    // –î–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π 100% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    if (creature instanceof Plant) {
      return 1.0;
    }
    // –î–ª—è –≥—É—Å–µ–Ω–∏—Ü 90% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    if (creature instanceof Caterpillar) {
      return 0.90;
    }
    return 0.0; // –ù–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –Ω–µ –µ—Å—Ç
  }

  @Override
  protected int calculateNutritionValue(Creature creature) {
    if (creature instanceof Plant plant) {
      int value = Math.min(plant.getQuantity(), 1); // –ï—Å—Ç 1 –µ–¥–∏–Ω–∏—Ü—É —Ä–∞—Å—Ç–µ–Ω–∏—è
      plant.reduce(value);
      return value;
    } else if (creature instanceof Caterpillar) {
      return 1; // –ì—É—Å–µ–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 1 –µ–¥–∏–Ω–∏—Ü—É —Å—ã—Ç–æ—Å—Ç–∏
    }
    return 0;
  }

  @Override
  protected Animal createOffspring(Location location) {
    return new Duck(location);
  }

  public String getSymbol() {
    return "ü¶Ü"; // –Æ–Ω–∏–∫–æ–¥-—Å–∏–º–≤–æ–ª —É—Ç–∫–∏
  }
}